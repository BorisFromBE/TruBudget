import * as winston from "winston";
import * as express from "express";

import { createBasicApp } from "./httpd/app";
import { createRouter } from "./httpd/router";
import { waitUntilReady } from "./lib/liveness";
import { RpcMultichainClient } from "./multichain";
import { randomString } from "./multichain/hash";
import { ConnectionSettings } from "./multichain/RpcClient.h";
import { ensureOrganizationStreams } from "./organization/organization";
import { registerNode } from "./network/controller/registerNode";

/*
 * Init the logs
 */
const winstonConsole = new winston.transports.Console();
winston.add(winstonConsole);

/*
 * Deal with the environment:
 */

const port: number = (process.env.PORT && parseInt(process.env.PORT, 10)) || 8080;

const jwtSecret: string = process.env.JWT_SECRET || randomString(32);
if (jwtSecret.length < 32) {
  console.log("Warning: the JWT secret key should be at least 32 characters long.");
}
const rootSecret: string = process.env.ROOT_SECRET || randomString(32);
if (!process.env.ROOT_SECRET) {
  console.log(`Warning: root password not set; autogenerated to ${rootSecret}`);
}
const organization: string | undefined = process.env.ORGANIZATION;
if (!organization) {
  winston.error(`Please set ORGANIZATION to the organization this node belongs to.`);
  process.exit(1);
}
const organizationVaultSecret: string | undefined = process.env.ORGANIZATION_VAULT_SECRET;
if (!organizationVaultSecret) {
  winston.error(
    `Please set ORGANIZATION_VAULT_SECRET to the secret key used to encrypt the organization's vault.`,
  );
  process.exit(1);
}

/*
 * Initialize the components:
 */

const rpcSettings: ConnectionSettings = {
  protocol: "http",
  host: process.env.RPC_HOST || "localhost",
  port: parseInt(process.env.RPC_PORT || "8000", 10),
  username: process.env.RPC_USER || "multichainrpc",
  password: process.env.RPC_PASSWORD || "this-is-insecure-change-it",
};
console.log(
  `Connecting to MultiChain node at ${rpcSettings.protocol}://${rpcSettings.host}:${
    rpcSettings.port
  }`,
);
const multichainClient = new RpcMultichainClient(rpcSettings);

const app = createBasicApp(jwtSecret, rootSecret);
app.use(
  "/api",
  createRouter(multichainClient, jwtSecret, rootSecret, organization!, organizationVaultSecret!),
);

/*
 * Run the app:
 */

// Enable useful traces of unhandled-promise warnings:
process.on("unhandledRejection", err => {
  console.error("UNHANDLED PROMISE REJECTION:", err);
  process.exit(1);
});

function registerSelf() {
  multichainClient
    .getRpcClient()
    .invoke("listaddresses", "*", false, 1, 0)
    .then(addressInfos =>
      addressInfos
        .filter(info => info.ismine)
        .map(info => info.address)
        .find(_ => true),
    )
    .then(address => {
      const req = {
        body: {
          data: {
            address,
            organization,
          },
        },
      };
      registerNode(multichainClient, req as express.Request);
    });
}

app.listen(port, err => {
  if (err) {
    return console.log(err);
  }
  console.log(`server is listening on ${port}`);

  waitUntilReady(port)
    .then(() =>
      ensureOrganizationStreams(multichainClient, organization!, organizationVaultSecret!),
    )
    .then(() => registerSelf());
});
